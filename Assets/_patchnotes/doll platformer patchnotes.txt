1.0

-- added sprite renderer package to project, added rudimentary sprites, animation, events

-- added basic jump and movement (using new Input System...). Player uses ActionMap InGamePlayer

-- created project, set up folders

1.1

-- added custom gravity using Edy's post https://forum.unity.com/threads/why-does-rigidbody-3d-not-have-a-gravity-scale.440415/

-- added jumping using Fernado's post https://medium.com/nerd-for-tech/implementing-a-jump-mechanic-unity-6420b106e47a  (with tweaks for 3D Unity project) [removed]

1.2

-- fixed a _bug by removing PlayerInput y values (Player can now only move left and right)

-- added Aim control to character (PlayerInput now reads WASD to aim). added Aim logic to DollPlayer.cs

-- added NPC01 and NPC01 states Attack, Patrol, Take Damage

-- added some rudimentary animation

1.3

-- added StatsComponent.cs for tracking NPC name, HP, move speed, max speed, Attack Power, Sight Distance, Walk Time, Idle Time

-- added Raycast logic to NPC01_PatrolState. casts a ray the size of sight distance and if it detects IPlayer, speeds up. if it gets within a minimum distance from the Player it will enter the Attack State

– Attack state should have interesting logic, ie propel self forward

– Add another State called “active patrol” when the NPC is aggroed and aggressively hunting the Player

-- NPC has a simple State Manager with an Event Manager and an Animation Manager. will need tweaking lol.

1.4

-- added a GroundCheck class. Doll now detects ground properly. Jump is still janky, requires fix

-- added Player sprites version 1.0. Added an animation state controller and linked up sprites

-- added animation logic to Player Movement

1.5

-- created a new folder for Oscars tests

-- made separate players movement and jumping to make it look more fluent and less janky

-- havent included the animation logic as the movement should come first before the animation is included

1.6

-- updated some boring stuff, added Health Component, fiddled with Player states

-- added a Player Attack state with a hitbox

-- added NPC02 (drum NPC)

-- added NPC02 sprite, patrol, attack and take damage state

-- using https://www.youtube.com/watch?v=rgYMRP0FzjM added a child camera and a TopLayer layMask (for rendering a Layer on top of everything else) currently Layer 30

1.7

-- began major refactoring of NPC scripts, condensing into reusable State Machines, States, Event Managers, Animation Controllers, etc

-- added "Take Damage" sprite & anim to NPC02

1.8

-- Marcus added grapple point stuff

1.9

-- Started refactoring Player script(s) to use a State Machine

2.0

-- added NPCDeathState.cs. On death NPCs jump vertically, get pushed back, spin, and fall down. BoxCollider is disabled and once they fall out of sight they destroy themselves. Two problems: 1) setting pushback direction to be consistent either with their current facing position or the direction the Player is attacking from. 2) AddTorque doesn't make the rigidbody spin very much no matter how much the numbers are pumped. It also might be fun to make them move in Z space, becoming smaller if they are knocked away and larger if knocked towards the screen (ie like smash bros)

-- added NPC Editor for testing

-- states now properly transition between each other

-- ModelView properly hooked up states and animations

2.1

-- added NPC02_Drum02 and NPC02_Drum03 prefabs. Added sprites and animations (takes longer than you think) 

TO DO: Make "Conjoined State" for drums

add SFX

fix patrol state

add attack/take damage to work with player

2.2

-- began work on a "Conjoined" variation of the drum NPC's where they start stacked on top of each other. Added ConjoinedState. Added conjoined bool to statsComp. Currently, the conjoined leader can trigger itself and its conjoined bros to attack in sequence

2.3

-- added NPC03_CymbalMonkey. Added sprites and animation. CymbalMonkey uses identical logic to NPC02

-- updated DeathState. The direction of the spinning is now randomised and enemies are knocked back in the direction they are facing

2.4

-- begun elevator, created the base model and view, no real functionality

TO DO: create states for functionality

Create Elevator Music

Add placeholder SFX

2.5

-- added PaddyBoi's Snare Monster SFX

-- added the best to NPC02SFX.cs, added rudimentary audio source and loader (refactor later)

-- added SFX logic to states & prefabs

2.6

-- refactored NPC02SFX.cs into a single script. Script is placed on an object w/audio source. Contains a List of NPC02 GameObjects. When added NPC02 adds itself to the List which is then subscribes itself to listening to ModelView events

-- any GameObject with a StatsComponent.cs now add themselves to the subscription on spawn and unsub on death

2.7

-- further reworked the Player into using State machine itself

-- converted all animation logic into using states and Play.clip

2.8

-- almost completed refactoring Player states

-- fiddled with rigidbody stuff to make the jump stuff actually work

-- (hack update will need further polishing)

-- TO DO: continue refactoring jump / movement

-- kill an NPC with an attack!!

2.9

-- added SpawnNPC function to Level Manager to fix an issue with NPC's not detecting the SFX script properly. this spawn logic will need further updating later

-- Player Attack state now correctly hits NPCs and ChangeHP() thru ITakeDamage

-- general bug fixes

3.0

-- completed overhauling Player Movement and Player States. there is an additional state machine within PlayerMovement.cs to track all this nonsense. Tonnes of tweaking and updating. Lots of bug fixes.

-- changed DollPlayerJumpState to use animation curve jump style (still needs tweaking)

-- added an offset to attackstate dependant on the facingRight bool

-- added controller/gamepad controls

-- NPCs now properly damage and kill the Player too

3.1

-- added NPC05 Hanging Doll, default sprite and prefab. Added NPC05MoveState.cs. When entering Move State Hanging Doll fires a Raycast down and moves towards the first Ground layer point it hits

-- added Rope object. Rope object will extend with Hanging Doll and be swung from later

-- added Dpad support to controls

3.2

-- NPC05 HangingState now detects the player and moves towards a position while spotted, else it moves back to its point of origin.

-- added an OnFall event for the Player

-- added the track "Father"

3.3

-- updated DollPlayerTakeDamageState.cs. Player now takes damage from incoming attacks, loses control and is knocked back. Added vulnerable to PlayerStats and disabled state to Player Movement. Doll Player takes damage only if vulnerable, and is only "knocked back" if not armoured (for example, attack states armour the Player, and Player is invulnerable and disabled while in TakeDamage state). 

-- added vulnerable and armoured variables to NPCStats, etc.

-- added a DamageComponent.cs. Works as an attack for whatever its attached to. Some enemies, like Hanging Doll, attack you passively with their bodies, hence damage component.

-- fiddled with Player, NPC02 and NPC05

-- added scene TestLevel01 to test platforming and enemy placement

-- TO-DO: give Player more leeway to act after getting hit

-- TO-DO: fix so each NPC only plays its own SFX

3.4

-- added songs Chase, Cymbal Boss, Somber and The Clocktower

-- added Types.cs and Types to the Stat Component

-- added "Types"

-- fixed NPC SFX issue but it will need further refactoring in the future

-- added Destructible Object. basically a part of the environment that can be destroyed

3.5

-- added NPC_Unknown. Added spawn logic. Unknown either fades into the scene or spawns in a random 360 spot around its spawn and then moves into place. NOTE: EXTREMELY HACK UPDATE LATER. TO-DO: Add more spawn ins

-- Imported TMPro Essentials to the project 

-- started adding dialogue using https://www.youtube.com/watch?v=2CmG7ZtrWso&

-- added Dialogue class, DialogueBox, DialogueText, Dialogue Manager

3.6

-- added CrouchAttackState, added crouch attack stuff to viewmodel and PlayerStats. fixed Crouching / Uncrouching with PlayerInputs (.started = start of input, .cancelled kills it)

-- added ITalk interface

-- added sphere to PlayerIdle to detect talking targets

-- added TalkState to Player. Added talk logic to Stats and Movement. Player turns to face whoever they're talking to.

3.7

-- added the ability to advance lines of dialogue. TO-DO: Refactor this (make new PlayerActions? make any button advance dialogue? etc)

-- Added the ability to talk to the Unknown!

3.8

-- created a new test level with some pre created dialogue and game instructions

-- noticed the crouch allows the player to slide down a slope if there is an angled plane.

3.9

-- added a Despawn state to Unknown. Turns off CanTalk and fades away~

-- updated GroundCheck to use a more reliable box collider system

-- updated Jump state. Doll now ignores Ground layer when jumping up to allow jumping through platforms to ascend. Will need a "roof" object to prevent jumping through things you don't want to jump through. Jump state now turns off canTalk.

-- there's a problem where the Attack state will cancel groundCheck for some reason (and also enable a second jump?)

4.0

-- added moving platform

-- created PlatformPoints as a prefab so you can have as many in one scene for a platform to travel to

-- can go up or down

-- groundcheck needs to be looked into because player falls through it and doesnt stick to platform

4.1

-- made the elevator

-- created a better moving platform

-- prefabs haven't been created for these yet

-- camera manipulation will be added next

4.2 

-- added HitBoxTracker.cs and HurtBoxTracker.cs. identical scripts that track the hitbox and hurtbox for each character state-to-state. might need to expand to account for multiple boxes per state later

-- added public enum State.cs. this may be useful for refactoring, for example changing ModelView to just ChangeState(State currentState) instead of listing all of them. But then this causes events that may return null? ask cam

-- 

4.3

-- added Cogs.cs and CogsManager for rotating and start/stopping multiple background cogs

4.4

-- added RisingLava.cs, updated HealthModel.cs. Lava moves upwards at a set speed and does damage to Health Model

4.5

-- added Main Menu scene and MainMenu.cs. added logic for selecting between Start / Options / Exit and Yes / No. 

4.6

-- added elevator and Rotating Eye

4.7

-- updated Main Menu. 

4.8

-- updated NPC01:
-- added NPC01Needle.cs and prefab

-- added WeaponScriptableObject.cs. Not very well done will need redoing

-- added StateGameObjectManager.cs. just a state machine but it takes GameObjects as states a la AnthillAI.

-- added NPC01Brain.cs. Decides what state to be depending on input from hearing and sight. Attacks the Player on sight.
-- added Idle, Melee Attack, Range Attack, Agitated State
-- NPC01 Jab. NPC01 waits, then lunges forward. returns to agitated state.
-- NPC01 RangeAttack. NPC01 fires a Needle projectile at the Player. returns to agitated state.
-- added logic for equipping/unequipping weapons. For now, just fire infinite Needles.
-- Needle has an active state wherein it can do damage to the Player. Needle will fly through the air when fire, and cease movement when it hits a wall or the ground.
-- NPC01 AgitatedState. NPC01 turns towards the lastPointOfInterest vector. If it detects the Player, attacks again. Else, depending on it's type, Idles or Patrols.
-- NPC01 Jump. NPC01 Jumps upwards

TODO: Increase complexity, decide on projectile logic, view, SFX

-- added UnpassableGround to differentiate between platform "Ground" and ground ground. You can jump up and down thru Ground, but not UnpassableGround.

4.9

-- made the Doll and NPC01 Dynamic Objects
-- updated NPC01 Patrol state
-- added LedgeEdge.cs and LedgeEdge prefab for detecting ledges
-- added Oscar Vision to NPC01

5.0

-- added Player 2.0 Sprites and animation, started a new GameObject state based Player
-- added eight states to Player 2.0
-- added HitboxGenerator.cs and HitboxCustomiser. Customiser is used by the dev to create visual representations of hitboxes that HitboxGenerator will make boxcolliders for

5.1 

-- updated PlayerState Manager to display new sprites
-- added Player2Jump and Player2Run, PlayerInputs action map, PlayerControls, and PlayerControlsMiddleMan.cs trying to improve jump and run logic
-- added FastScriptReload plugin

5.2 

-- Added GameData.cs, DataPersistenceManager.cs, FileDataHandler.cs and IDataPersistence

5.3

-- added PlayerSFX.cs and 16 audio SFX clips

-- added PlayerMoments.cs. PlayerMoments are events that don't change state but still require reactions from model/view. For example, landing will trigger a moment, and landing from a high height will trigger another moment. Another application I can think of is triggering idle animations when the Player is idle for too long

-- added PlayerStateManagerEditor.cs and made buttons to switch states and test moments

-- added logic that pushes the player down during fall for snappier movement, also tracks how long you fall to determine hard/soft landing

5.4

-- started the Candlewitch fight. Added placeholder sprites. Added CandlewitchStateBase.cs, ModelView, View and Brain

-- added StartFightState, DeathState, Attack01State, TeleportState, VanishState

-- added Teleport logic. Candlewitch teleports itself between 5 random spots. Candlewitch just knows where the Player Doll is and turns to face them

-- added logic to determine if the Player should range attack or melee. tweaked jump stuff

-- renamed NPC layer to ITakeDamage

-- updated unity project to 2023.1.5f

5.5

-- updated Player Range Attack

-- now shoots a pooled projectile prefab

-- you can buffer range attacks to fire continuously

-- left a trail of hacks behind to fix later

-- updated Fall State to push against the Doll when it preemptively senses the ground to prevent sinkage

5.6

-- Checkpoint saves player position on the map

-- Multiple save positions will save the position on the map to wherever the player hit previously

-- Need to discuss with group what will need to be saved overall and weigh up the pros and cons

5.7

-- Added flamewheel and fireball prefab

-- fireball has a game manager with 4 states. added animation logic.

-- flamewheel uses object pool to summon fireballs and spins them

-- TODO: make it work with moving (probably have to change the spin method? transform.rotate doesn't cut it)

-- updated ObjectGameManager and ObjectPool

5.8

-- updated ObjectPool, fixed Player Range Attack, updated FlameWheel

5.9

-- candlewitch now summons flamewheel, flamewheel follows target and spins. 

-- updated ObjectPool

6.0

-- updated Fireball Projectile, Linger, Death state. Works through Damager.cs. Successfully shoots at targets and deals damage to ITakeDamage targets. "Dies" on hit of ITakeDamage and Lingers if it hits anything else. Lingering fireballs are static and do damage where they land before dying.